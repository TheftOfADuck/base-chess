# For full config options, check the docs:
#    docs.serverless.com

service: base-chess
#app: ${self:service}
#org: theftofaduck

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-2
  stage: dev

  logRetentionInDays: 7
  logs:
    restApi:
      accessLogging: true
      executionLogging: false
      level: INFO

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [dynamoGamesTable, Arn]
            - Fn::GetAtt: [dynamoPublicQueueTable, Arn]
            - Fn::GetAtt: [dynamoPrivateQueueTable, Arn]


# TODO - Look into converting from REST to HTTP API (http vs httpAPI event), for cost and speed
# https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html
# https://www.serverless.com/framework/docs/providers/aws/events/http-api
functions:
  postStartPublicGame:
    handler: src/endpoints/postStartPublicGame.lambdaHandler
    events:
      - http:
          path: game/start-public
          method: post
          cors:
            origins:
              - ${self:custom.allowedCorsOrigins.${self:custom.stage}}
              - ${self:custom.allowedCorsOrigins.dev}

  postStartPrivateGame:
    handler: src/endpoints/postStartPrivateGame.lambdaHandler
    events:
      - http:
          path: game/start-private
          method: post
          cors:
            origins:
              - ${self:custom.allowedCorsOrigins.${self:custom.stage}}
              - ${self:custom.allowedCorsOrigins.dev}

  postJoinPrivateGame:
    handler: src/endpoints/postJoinPrivateGame.lambdaHandler
    events:
      - http:
          path: game/{gameId}/join
          method: post
          cors:
            origins:
              - ${self:custom.allowedCorsOrigins.${self:custom.stage}}
              - ${self:custom.allowedCorsOrigins.dev}
          request:
            parameters:
              paths:
                gameId: true

  getGameState:
    handler: src/endpoints/getGameState.lambdaHandler
    events:
      - http:
          path: game/{gameId}/state
          method: get
          cors:
            origins:
              - ${self:custom.allowedCorsOrigins.${self:custom.stage}}
              - ${self:custom.allowedCorsOrigins.dev}
          request:
            parameters:
              paths:
                gameId: true

  postMove:
    handler: src/endpoints/postMove.lambdaHandler
    events:
      - http:
          path: game/{gameId}/move
          method: post
          cors:
            origins:
              - ${self:custom.allowedCorsOrigins.${self:custom.stage}}
              - ${self:custom.allowedCorsOrigins.dev}
          request:
            parameters:
              paths:
                gameId: true

  maintainStaleQueue:
    handler: src/endpoints/maintainStaleQueue.lambdaHandler
    events:
      - schedule: rate(1 minute)

resources:
  Resources:
    dynamoGamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:custom.stage}-games
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    dynamoPublicQueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:custom.stage}-public-queue
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    dynamoPrivateQueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:custom.stage}-private-queue
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-domain-manager # https://www.serverless.com/blog/serverless-api-gateway-domain
  - serverless-offline # https://www.serverless.com/plugins/serverless-offline
  - serverless-dotenv-plugin # https://www.serverless.com/plugins/serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:custom.stage}
  allowedCorsOrigins:
    dev: http://localhost:3000
    test: http://${self:service}-test.theftofaduck.com
    prod: http://${self:service}.theftofaduck.com

  domains: # TODO - Make these service.api.domain, not service-api.domain
    dev: ${self:service}-api-dev.theftofaduck.com
    test: ${self:service}-api-test.theftofaduck.com
    prod: ${self:service}-api-prod.theftofaduck.com

  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: ${self:custom.stage}
    certificateName : '*.theftofaduck.com'
    createRoute53Record: true
    endpointType: regional
    autoDomain: true
  serverless-offline:
    httpPort: 3001
